---
layout: post
title: "150?1.3: Anagrams"
published: false
---

> Given two strings, write a method to decide if one is a permutation of
> the other.

We can just count the occurrences of each character.
Strings which contain the same number of every character are
permutations of each other.  Assuming ASCII,

    #include<string.h>
    static inline void count(char *s, int *histogram, int incr) {
      while(*s) histogram[*s] += incr;
    }

    bool is_anagram(char *s, char *t) {
        int histogram[256];
        bool retval = true;
        memset(histogram, 0, sizeof(histogram));
        count(s, histogram, 1);
        count(t, histogram, -1);
        for (int i = 0; i < 256; ++i) retval = retval && !histogram[i];
        return retval;
    }

For Unicode, assuming we can iterate over the string at the level of
characters (i.e., that we don't have to parse the multibyte
representation ourselves), the same approach works assuming a sparse
map like a hash table or binary search tree.

A somewhat slower approach (`O(n log n)` instead of `O(n)`) if we're
allowed to mutate our input is to sort both strings in place and then 
compare them:

    #include<stdlib.h>
    #include<string.h>
    int compare(const void *a, const void *b) {
      return *(char *) a - *(char *) b;
    }
    bool is_anagram(char *s, char *t) {
      size_t len_s = strlen(s);
      size_t len_t = strlen(t);
      if (len_s != len_t) return false;
      qsort(s, strlen(s), sizeof(*s), compare);
      qsort(t, strlen(t), sizeof(*t), compare);
      return !strcmp(s, t[0]);
    }
